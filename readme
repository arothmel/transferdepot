# transferdepot

WIP scratchpad — not production ready

## Current layout
- `app.py` – Flask entrypoint, sets up blueprints and config
- `services/files.py` – file save/load helpers, groups.json handling
- `templates/` – index + upload form
- `uwsgi.ini` – uwsgi config (long uploads + workers)

## Notes
- groups.json currently lives outside project (`transferdepot-001/config/groups.json`)
- env vars: `TD_UPLOAD_FOLDER`, `TD_GROUPS_FILE`, `TD_CHUNK_SIZE`, `TD_STATUS_FOLDER`, `TD_HEARTBEAT_INTERVAL`, `TD_HEARTBEAT_RETENTION`, `TD_RETENTION_DEFAULT_DAYS`, `TD_RETENTION_OVERRIDES`
- oncall viewer env vars: `TD_ONCALL_DIR`, `TD_ONCALL_FILE` (defaults: `/home/tux/transferdepot/files/ONCALL`, `oncall_board.pdf`)
- goal: **don’t freeze the system during uploads**
- testing with uWSGI → 2 processes, 2 threads
- UI door: `/` lists groups, `/<group>/` uploads, `/<group>/status` auto-refreshes heartbeat progress for legacy browsers (stop refreshing once all transfers finish).
- Group retention: defaults to 28 days; override with `TD_RETENTION_OVERRIDES` (e.g. `BUFFER:7,TTCS:28`) and both files + heartbeat entries clean up on that schedule.

## Camelot (DEV) deployment notes
- uWSGI runs from this repo using `uwsgi.ini`; socket lives at `<repo>/run/transferdepot.sock` (run `mkdir -p run run/status` once on each host).
- Always start with `uwsgi --ini uwsgi.ini` so the master process, socket backlog, and streaming knobs stay consistent across DEV (Camelot); on Virtca8 the systemd unit should invoke the same ini file rather than ad-hoc CLI flags.
- Nginx on Sh1re front-ends Camelot; use `deploy/nginx-transferdepot.conf` as the tuned vhost (update `server_name` and TLS paths per environment).
- Key upload tunings: request buffering disabled end-to-end, 0 upload size limits, 1h timeouts so unstable clients can resume, and offload threads handle slow disk/network writes.
- Keep Camelot isolated from Virtca8 (production); these settings are DEV-only until validated with perf tests.
- Admin door: `/admin/health` shows group counts + active uploads, `/admin/dev-api` highlights supported REST endpoints.

## Next
- hook up `/files/<group>/<filename>` serving
- admin UI for groups (add/rename)
- more perf tests on upload streaming
